Explicar y ejemplificar composición y agregación.
Explicar que es polimorfismo.
Dar un ejemplo de la vida real de polimorfismo. Diagrama de clases y explicación.
Codificar el ejemplo del punto 3 con Javascript.
La agregación es un tipo de asociación que indica que una clase es parte de otra clase (composición débil). Los componentes pueden ser compartidos por varios compuestos (de la misma asociación de agregación o de varias asociaciones de agregación distintas). La destrucción del compuesto no conlleva la destrucción de los componentes. Habitualmente se da con mayor frecuencia que la composición.
Ejemplo: Si tuviéramos una empresa a donde concurren varios clientes, se podría decir que la empresa representaría una clase que agrupa a varias clases cliente
Composición es una forma fuerte de composición donde la vida de la clase contenida debe coincidir con la vida de la clase contenedor. Los componentes constituyen una parte del objeto compuesto. De esta forma, los componentes no pueden ser compartidos por varios objetos compuestos. La supresión del objeto compuesto conlleva la supresión de los componentes.
El símbolo de composición es un diamante de color negro colocado en el extremo en el que está la clase que representa el “todo” (Compuesto).
Ejemplo: Siguiendo con el ejemplo de la empresa, se puede decir que dicha clase empresa contiene varias clases empleado (que serían las personas que trabajan en la empresa). El tiempo de vida de cada clase empleados está ligado y depende directamente del tiempo de vida de la clase de empresas, ya que no pueden haber empleados sin empresa.

En programación orientada a objetos el polimorfismo se refiere a la posibilidad de definir clases diferentes que tienen métodos o atributos denominados de forma idéntica, pero que se comportan de manera distinta. El concepto de polimorfismo se puede aplicar tanto a funciones como a tipos de datos. Así nacen los conceptos de funciones polimórficas y tipos polimórficos. Las primeras son aquellas funciones que pueden evaluarse o ser aplicadas a diferentes tipos de datos de forma indistinta; los tipos polimórficos, por su parte, son aquellos tipos de datos que contienen al menos un elemento cuyo tipo no está especificado.
3)Como un ejemplo de la vida cotidiana tenemos el cine (que será nuestra clase principal). Dentro de un cine se proyectan diferentes largometrajes, tales como películas o documentales. En base a esto podemos tomar "largometrajes" como una clase dentro de "Cine" que a su vez va a tener dos clases derivadas llamadas "películas" y "documentales", ya que aunque ambas derivan de la misma clase, tienen diferentes características, distintos horarios, distintos tipos de audiencia, distintos precios para los espectadores, etc.
Dentro de la clase "largometrajes" se podría crear una función que se llame "reproducir()" que permita recibir como parámetro lo que se quiera reproducir en una sala de cine (a veces "películas" y a veces "documentales"). Si el día de mañana llegará a nuestro cine una grabación de una serie transmitida hace muchos años pero ahora en 3D, el poliformismo nos ayudaría a facilitar el proceso de reproducción de dicho largometraje en nuestro cine. Como?
Creando una clase para este archivo, que también sea una clase derivada de la clase "largometrajes" y que luego pueda ser enlazado con la función "reproducir()", ya utilizada con los otros dos tipos de largometrajes. En definitiva, si en algún momento se quisiera reproducir otro tipo de largometraje, no se tendria que tocar la clase "Cine" ni la función "reproducir()". Siempre que aquello que quieras reproducir sea de la clase "Largometraje" o una de sus clases derivada, la funcion lo aceptará.
